switch exist ('subjs')
    case 1
        [cwd,pth_subjdirs] = file_selector(subjs);
    otherwise
        [cwd,pth_subjdirs] = file_selector; %GUI to choose the main study directory
end

switch exist ('taskArray')
    case 1
        [pth_taskdirs, taskArray] = file_selector_task(pth_subjdirs, taskArray);
    otherwise
        [pth_taskdirs, taskArray] = file_selector_task(pth_subjdirs);
end

for s = 1:length(pth_subjdirs)
    all_proc_files = glob(fullfile(pth_taskdirs{s},'WLM*nii');
    trs = length(all_proc_files); %If no STC, this will have 4 extra volumes
    selected_proc_files = {};

    if trs == 0
        disp('Hmmm... not finding the necessary files. Check search criteria in preproc_fmri')
    elseif trs < 2; %need to split out nii file with ",number_of_volume"
        trs = length(spm_vol(all_proc_files{1,1})); % accommodates the conventional naming, even though the first four volumes are empty
        all_proc_files = char(all_proc_files{1,1});
        if eq(settings.dummies,1)
            for x = 5:(trs);
                selected_proc_files{x} = [strcat(all_proc_files,',',int2str(x))]; %must be square brackets, so there are no quotes in the cell
            end
            selected_proc_files = selected_proc_files(5:end); %discards the first four scans
        else
            for x = 1:(trs);
                selected_proc_files{x} = [strcat(all_proc_files,',',int2str(x))]; %must be square brackets, so there are no quotes in the cell
            end
        end
        mean_img = strcat('mean',fileName,',5'); %so the image isn't empty

    else %individual files for the volumes exist and need to be loaded sequentially
        selected_proc_files = {all_proc_files{:}};
        mean_img = strcat('mean',fileName); %so the image isn't empty
    end

    if isempty(selected_proc_files)
        fprintf('Not locating files for %s\nfmri_realign2smooth (line 48):\n ',all_proc_files);
        return
    end

    scan_set = [];
    scan_set{1,1} = selected_proc_files'; % the column cellstr is necessary for SPM12 (SPM12b uses the non-transposed, row cellstr version)
    cd(subj_dir);

    clear matlabbatch
    spm_jobman('initcfg');

    matlabbatch{1}.spm.spatial.realign.estimate.data = scan_set;
    spm_jobman('run','matlabbatch');
