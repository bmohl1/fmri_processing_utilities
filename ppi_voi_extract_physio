function ppi_voi_extract(subjs,task,voi,reg_var, results_dir)

%defaults
voi = 'nAcc';
reg_var = ('on');
maxima_type = ('supra'); % Change this to supra or local
get_mtn_reg = 'yes'; %Can change and will enter the 6 regressors for the rp file along with PPI regressors

tool_dir = fileparts(fileparts(which('ppi_voi_extraction')));

addpath([tool_dir filesep 'general_utilities']);
[spm_home, mni_home] = update_script_paths(tool_dir); %make sure that we're getting into SPM12b

%% Grab the files
switch exist ('subjs')
    case 1
        [cwd,pth_subjdirs] = file_selector(subjs);
        pth_subjdirs = unique(pth_subjdirs);
        for tt=1:length(pth_subjdirs)
            tmp = textscan(pth_subjdirs{tt},'%s','Delimiter','/');
            subjList{tt} = tmp{1,1}{end-1};
            pth_subjdirs{tt} = strcat(filesep,fullfile(tmp{1,1}{1:end-1})); %otherwise loops through the subject multiple times
        end

    otherwise
        [cwd,pth_subjdirs] = file_selector;
        for tt=1:length(pth_subjdirs)
            tmp = textscan(pth_subjdirs{tt},'%s','Delimiter','/');
            subjList{tt} = tmp{1,1}{end};
        end
end

pth_subjdirs = unique(pth_subjdirs);

%% Choose the mask
if ~exist('voi','var')
    disp('Please select the VOI');
    tempfile = cellstr(spm_select([1,Inf],'image','Select the VOI for this analysis','',pwd));
    tempfile = textscan(tempfile{1,1}, '%s', 'Delimiter',',');
    voi_file = tempfile{1,1}{1}; %Must have the ",1" removed for accurate handling elsewhere
    voi_dir = fileparts(voi_file);
end

switch exist('task','var')
    case 1
        task = {task};
        [pth_taskdirs, task] = file_selector_task(pth_subjdirs, task);
    otherwise
        [pth_taskdirs, task] = file_selector_task(pth_subjdirs);
end

projName = textscan(cwd,'%s','Delimiter','/');
projName = projName{1,1}{end};

%%
home_dir = cwd;
cd(home_dir)

switch nargin
    case 4
        reg_var = (reg_var); %overrides the default
    case 3
        voi_name = (voi);
    case 2
        display('Did not choose VOI. Using default.');
end

%% Start setting up the individual's script
for nSubj = 1:length(pth_subjdirs);

    subj_pth = pth_subjdirs{nSubj};
    if exist('subjList','var') && length(subjList) >= 1;
        %subjList must come with nSubj
        subjs = char(subjList{nSubj});
    end
    [proj_dir, subj, subj_prefix] = find_subj_pths (subj_pth,subjs); %common script

    %% Just to speed up for K and J
    results_dir = [subj_pth,filesep,'model_eats_ar_mvmnt_s6'];

    %%
    masks = {'wm' 'csf' {voi}}; % should allow for multiple VOIs to be input (???)

    check_spm  = dir(strcat(results_dir,filesep,'SPM.mat'));
    if isempty(check_spm.name)
        sprintf('Was the design matrix evaluated for %s?',subj)
        disp('Did not extract eigenvariates')
    else
        spm_mat = {fullfile(results_dir,check_spm.name)};

        %% Figure out where the t1 directory is (b/c it isn't always in the same timepoint
        [subj_t1_dir, subj_t1_file, t1_ext] = locate_scan_file('t1', subj);%checks if there is a more recent T1
        if isempty(subj_t1_file); %won't override the global "reset" back to the first T1, if there has been an more recent one, but also supplies a scan, if none was defined.
            [subj_t1_dir, subj_t1_file, t1_ext] = locate_scan_file('t1',subj_prefix);
        end
        if isempty(subj_t1_file)
            try
                [subj_t1_dir, subj_t1_file, t1_ext] = locate_scan_file('anat', subj);
            catch
                disp ('Naming scheme for the T1 directory does not follow the convention of "t1" or "anat". Please rename.')
            end
        end

        %% Extract from masks
        for j = (1:length(masks))
            mask = masks{j};
            check_voi = strcat(results_dir,filesep,'VOI_',mask,'_1.mat')
            if ~exist(check_voi,'file')
                disp ('Extracting values')
                reg_out = strcat(mask, '_thresh');
                if strcmp(mask,'csf')
                    mask_file = [subj_t1_dir,filesep,'c3',subj_t1_file]; %csf
                elseif strcmp(mask, 'wm')
                    mask_file = [subj_t1_dir,filesep,'c2',subj_t1_file]; %wm
                else
                    mask_file = [proj_dir,filesep, mask,'*nii'];
                end

                %% Escape to segment, if mask is missing
                if isempty(glob(mask_file)) && (contains ('csf', mask) || contains('gm', mask))
                    segmentation_spm12(subj,0,0); %for single subject, don't redo segmentation, and don't use weird template
                end

                mask_file = {[mask_file,',1']};

                %% Get Number of runs
                [runs, task] = file_selector_task(NEEDS HELP);
                for sess = 1:length(runs);
                    clear matlabbatch
                    spm_jobman('initcfg');
                    matlabbatch{1}.spm.util.imcalc.input = mask_file;
                    matlabbatch{1}.spm.util.imcalc.output = reg_out;
                    matlabbatch{1}.spm.util.imcalc.outdir = {results_dir};
                    matlabbatch{1}.spm.util.imcalc.expression = 'i1 > .99';
                    matlabbatch{1}.spm.util.imcalc.options.dmtx = 0;
                    matlabbatch{1}.spm.util.imcalc.options.mask = -1;
                    matlabbatch{1}.spm.util.imcalc.options.interp = 1;
                    matlabbatch{1}.spm.util.imcalc.options.dtype = 4;
                    matlabbatch{2}.spm.util.voi.spmmat = spm_mat;
                    matlabbatch{2}.spm.util.voi.adjust = 0; %don't adjust for anything, so that you are not overcompensating for the motion
                    matlabbatch{2}.spm.util.voi.session = sess; %has to be per session to go with the correct mtn and physio regressors.
                    matlabbatch{2}.spm.util.voi.name = mask;
                    matlabbatch{2}.spm.util.voi.roi{1}.mask.image(1) = cfg_dep('Image Calculator: Imcalc Computed Image:wm_thresh', substruct('.','val', '{}',{1}, '.','val', '{}',{1}, '.','val', '{}',{1}), substruct('.','files'));
                    matlabbatch{2}.spm.util.voi.roi{1}.mask.threshold = 0.99;
                    matlabbatch{2}.spm.util.voi.roi{2}.spm.spmmat = {''};
                    matlabbatch{2}.spm.util.voi.roi{2}.spm.contrast = 3;
                    matlabbatch{2}.spm.util.voi.roi{2}.spm.conjunction = 1;
                    matlabbatch{2}.spm.util.voi.roi{2}.spm.threshdesc = 'none';
                    matlabbatch{2}.spm.util.voi.roi{2}.spm.thresh = 0.2;
                    matlabbatch{2}.spm.util.voi.roi{2}.spm.extent = 0;
                    matlabbatch{2}.spm.util.voi.roi{2}.spm.mask = struct('contrast', {}, 'thresh', {}, 'mtype', {});
                    matlabbatch{2}.spm.util.voi.expression = 'i1.*i2';


                    %% save
                    savefile = [subj_pth,filesep,mask,'_voi_extract_',subj,'.mat'];
                    save(savefile,'matlabbatch');
                    spm_jobman('run',matlabbatch)
                end
            end
            temp = load(check_voi);
            extra_regs{j} = [temp.Y];
        end
    end
end
